# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'finalui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPen,QColor
import pyqtgraph
from pyqtgraph import PlotWidget
from PyQt5.QtWidgets import QFileDialog,QColorDialog
from PyQt5.QtCore import QTimer
import pandas as pd
import wfdb
from PyQt5 import QtTest
import sys
import random
import numpy as np
from fpdf import FPDF
from PIL import Image
import os
import re
import math
graph1list=[]
graph1channels=[]
graph1active=[]
graph2list=[]
graph2channels=[]
graph2active=[]
plotlist=[]
plotlist2=[]
captured_images = []
mean_values = []
std_values =[]
min_values=[]
max_values=[]
duration_values=[]
statTables=[]
channelNames=[]
pause1=False
pause2=False
rewind_check=False
linked=False
playing=True
playing2=True
signal_to_resume=None
Object_to_resume=None
new_signal=0
new_signal2=0
channelindex=0
channelindex2=0
user_input=None
new_signal_index=0
new_signal_index2=0
maxval=0
minval=0
minval2=0
maxval2=0
class Signal:
  def __init__(self, data, color, list_index, name, filepath=None,indextime=0,hidden=True,plotted=[],xdata=[],xplotted=[]):
    self.data=data
    self.color=color
    self.name=name
    self.indextime=indextime #?
    #filepath?
    self.xdata=xdata
    self.hidden=hidden
    self.plotted=plotted
    self.list_index=list_index
    self.xplotted=xplotted
class PlotWindow: #??
    def __init__(self, graphobject,attachedindex,cinespeed=0, paused=False,zoom=0,autoscroll=True):
        self.graphobject=graphobject
        self.cinespeed=cinespeed
        self.paused=paused
        self.zoom=zoom
        self.autoscroll=autoscroll
        self.attachedindex=attachedindex
    
class Ui_MainWindow(object):

    def BrowseSignal_1(self):
        global i
        global plotlist
        global graph1list
        global new_signal
        global new_signal_index
        color= ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])]
        color=QColor(color[0]).getRgb() #?
        options = QFileDialog.Options()
        file_name1, _ = QFileDialog.getOpenFileName(MainWindow, "Open File", "", "CSV Files (*.csv);;Text Files (*.txt)", options=options)
        if file_name1:
            filenamestring=file_name1[-8:-4] #?
            df = pd.read_csv(file_name1)
            column_length=self.PrepareData(df,color,filenamestring)
            new_signal_index=new_signal_index+column_length
            if new_signal==0:
                graph1list[new_signal].hidden=False #where do u create objects
            graph1list[new_signal].name="Channel 1 - " +filenamestring
            graph1list[new_signal].list_index=0
            plotobject= self.preparePlot(graph1list[new_signal],color)
            plotlist.append(plotobject) #list of objects prepared to be plotted?
            if new_signal==0:
                self.PlotData(graph1list[new_signal],plotobject) #?
            else:
                self.legend.removeItem(graph1list[new_signal].name)
                self.switchChannel("1",new_signal)
            new_signal=new_signal_index
    #def play(self,currData,clr):
    def BrowseSignal_2(self):
        global plotlist2
        global graph2list
        global new_signal2
        global new_signal_index2
        color= ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])]
        color=QColor(color[0]).getRgb() #?
        options = QFileDialog.Options()
        file_name2, _ = QFileDialog.getOpenFileName(MainWindow, "Open File", "", "CSV Files (*.csv);;Text Files (*.txt)", options=options)
        if file_name2:
            filenamestring=file_name2[-8:-4] #?
            df = pd.read_csv(file_name2)
            column_length=self.PrepareData2(df,color,filenamestring)
            new_signal_index2=new_signal_index2+column_length
            if new_signal2==0:
                graph2list[new_signal2].hidden=False #where do u create objects
            graph2list[new_signal2].name="Channel 1 - " +filenamestring
            graph2list[new_signal2].list_index=0
            plotobject2= self.preparePlot2(graph2list[new_signal2],color)
            plotlist2.append(plotobject2) #list of objects prepared to be plotted?
            if new_signal2==0:
                self.PlotData2(graph2list[new_signal2],plotobject2) #?
            else:
                self.legend2.removeItem(graph2list[new_signal2].name)
                self.switchChannel("2",new_signal2)
            new_signal2=new_signal_index2
    
            
    def PrepareData(self,df,clr,filenamestring): #in order to support two graphs
            rangeInt=int(len(df.columns)-1)
            y_data=[] 
            for i in range(rangeInt):
                newsig=None
                y_data.append(df.iloc[:,i]) #stores each column as a channel
                if ~len(graph1list):
                    desc="Channel "+str(i+1) +" - " + filenamestring
                    graph1channels.append(desc) # saves name of the channels in an array 
                    
                    self.selectChannelBox1.addItem(graph1channels[i]) #adds thr channel name to the combo box
                    newsig=Signal(y_data[i],clr,i,desc)  #Creates a new object/signal giving it data,color, and name
                    if len(graph1active)>1:
                        alreadythere=newsig.data[0:graph1active[len(graph1active)-1].indextime]
                        newsig.indextime=graph1active[len(graph1active)-1].indextime
    
                        for i in range(len(alreadythere)):
                            newsig.plotted.append(alreadythere[i])
                            
                    #remaining parameters
                    newsig.plotted=[]
                    graph1list.append(newsig) #why both?
            return rangeInt
    def PrepareData2(self,df,clr,filenamestring2): #in order to support two graphs
              rangeInt=int(len(df.columns)-1)
              y_data=[] 
              for i in range(rangeInt):
                  newsig=None
                  y_data.append(df.iloc[:,i]) #stores each column as a channel
                  if ~len(graph2list):
                      desc="Channel "+str(i+1) +" - " + filenamestring2
                      graph2channels.append(desc) # saves name of the channels in an array 
                      self.selectChannelBox2.addItem(graph2channels[i]) #adds thr channel name to the combo box
                      newsig=Signal(y_data[i],clr,i,desc)  #Creates a new object/signal giving it data,color, and name
                      if len(graph2active)>1:
                          alreadythere=newsig.data[0:graph2active[len(graph2active)-1].indextime]
                          newsig.indextime=graph2active[len(graph2active)-1].indextime
      
                          for i in range(len(alreadythere)):
                              newsig.plotted.append(alreadythere[i])
                              
                      #remaining parameters
                      newsig.plotted=[]
                      graph2list.append(newsig) #why both?
              return rangeInt
    def preparePlot(self,signal,clr): #static plotting?
        penk=pyqtgraph.mkPen(clr)
        plotobject=PlotWindow(self.graph1.plot(signal.plotted,pen=penk,name=signal.name),signal.list_index) #plotted is empty?
        self.graph1.setXRange(0,55)
        self.graph1.setYRange(-20,20) #why these?
        return plotobject
   
    def preparePlot2(self,signal,clr): #static plotting?
        penk=pyqtgraph.mkPen(clr)
        plotobject2=PlotWindow(self.graph2.plot(signal.plotted,pen=penk,name=signal.name),signal.list_index) #plotted is empty?
        self.graph2.setXRange(0,55)
        self.graph2.setYRange(-20,20) #why these?
        return plotobject2    
    
    def PlotData(self,signal,plotobject): #dynamic?
         global maxval
         global minval
         self.timer1=QTimer()
         self.timer1.setInterval(250-self.graph1object.cinespeed)
         self.timer1.timeout.connect(lambda:self.update1(signal,plotobject))
         self.timer1.start()
         self.graph2object.zoom=self.graph1object.zoom
         graph1active.append(signal)
         maxval=math.ceil(max(signal.data))
         minval=math.floor(min(signal.data))
         self.verticalScroll1.setMaximum(maxval)
         
                 #if len(signal.plotted)==len(signal.data)-1:
                   # break 

    def PlotData2(self,signal,plotobject2): #dynamic?
        self.timer2=QTimer()
        print(self.graph2object.cinespeed)
        self.timer2.setInterval(250-self.graph2object.cinespeed)
        self.timer2.timeout.connect(lambda:self.update2(signal,plotobject2))
        self.timer2.start()
        #self.verticalscroll(caller="2",value=1)
        #self.graph2object.autoscroll=True
        maxval2=math.ceil(max(signal.data))
        minval2=math.floor(min(signal.data))
        graph2active.append(signal)    
        
    def update1(self,signal,plotobject):
        global graph1active
        global pause1
        global signal_to_resume
        global Object_to_resume
        global maxval
        global minval
        self.timer1.setInterval(250-self.graph1object.cinespeed)
        #self.horizontalScroll1.(len(graph1list[0].plotted))
        
        for i in range(len(graph1active)): #contains1
          if playing==False:
           signal_to_resume=signal
           Object_to_resume=plotobject
           self.timer1.stop()
           break
          else:
            if len(graph1active[i].plotted)!=len(graph1active[i].data):
                graph1active[i].plotted.append(graph1active[i].data[graph1active[i].indextime])#?
                self.update_plot_data(graph1active[i],plotlist[i].graphobject) #use plot object for second parameter
                if self.graph1object.autoscroll:
                    self.graph1.setXRange(len(signal.plotted)-25-self.graph1object.zoom,len(signal.plotted)-2.5)#?
                    self.graph1.setYRange(minval-self.graph1object.zoom/6,maxval+self.graph1object.zoom/6)    
   
    def update2(self,signal,plotobject2):
        global pause2
        global graph2active
        global signal_to_resume
        global Object_to_resume
        global maxval2
        global minval2
        self.timer2.setInterval(250-self.graph2object.cinespeed)
        for i in range(len(graph2active)): #contains1
          if playing2==False:
           signal_to_resume=signal
           Object_to_resume=plotobject2
           self.timer2.stop()
           break
          else:
            if len(graph2active[i].plotted)!=len(graph2active[i].data):
                graph2active[i].plotted.append(graph2active[i].data[graph2active[i].indextime])#?
                self.update_plot_data2(graph2active[i],plotlist2[i].graphobject) #use plot object for second parameter
                if self.graph2object.autoscroll:
                    self.graph2.setXRange(len(signal.plotted)-25-self.graph2object.zoom,len(signal.plotted)-2.5)#?
                    self.graph2.setYRange(minval2-self.graph2object.zoom/6,maxval2+self.graph2object.zoom/6)   
    def pause1(self): #why not a parameter in the class
        global paused1
        if ~paused1: #not paused
            paused1=True
        else:
            paused1=False
    def pause2(self): #why not a parameter in the class
        global paused2
        if ~paused2: #not paused
            paused2=True
        else:
            paused2=False       
    def update_plot_data(self,signal,plotobject):
        penk=pyqtgraph.mkPen(signal.color,width=2)
        if len(signal.xdata):
            plotobject.setData(signal.xplotted,signal.plotted,pen=penk) #why set it again
        else:
            plotobject.setData(y=signal.plotted,pen=penk)
        signal.indextime+=1  #?
    def update_plot_data2(self,signal,plotobject2):
         penk=pyqtgraph.mkPen(signal.color,width=2)
         plotobject2.setData(signal.plotted,pen=penk) #why set it again
         signal.indextime+=1  #?
         
    def verticalscroll(self,value,caller):
        global graph1list
        global maxval
        global minval
        print(value)
        self.verticalScroll1.setMinimum(minval)
        if linked==False:
            if caller=="1":
                if self.graph1object.autoscroll:
                    self.graph1object.autoscroll=False
                self.graph1.setYRange((self.graph1object.zoom/minval)+minval,(self.graph1object.zoom/maxval)-maxval)
            # self.verticalScroll1.setMaximum(-2-self.graph1object.zoom+value)
            # self.verticalScroll1.setMinimum(value-self.graph1object.zoom+16)
            if caller=="2":
                if self.graph2object.autoscroll:
                    self.graph2object.autoscroll=False
                self.graph2.setYRange(-8-value-self.graph2object.zoom,8-value+self.graph2object.zoom)
        else:
            self.graph1object.autoscroll=False
            self.graph2object.autoscroll=False
            self.graph1.setYRange(-8-value-self.graph1object.zoom,8-value+self.graph1object.zoom)
            self.graph2.setYRange(-8-value-self.graph2object.zoom,8-value+self.graph2object.zoom)
    def horizontalscroll(self,value,caller):
        if linked==False:
            if caller=="1":
                if self.graph1object.autoscroll:
                    self.graph1object.autoscroll=False
                self.graph1.setXRange(len(graph1active[0].plotted)-25-self.graph1object.zoom+value,len(graph1active[0].plotted)+self.graph1object.zoom+value)
                self.horizontalScroll1.setMaximum(len(graph1active[0].plotted)-self.graph1object.zoom-len(graph1active[0].plotted))
                self.horizontalScroll1.setMinimum(self.graph1object.zoom+25-len(graph1active[0].plotted))
            if caller=="2":
                if self.graph2object.autoscroll:
                    self.graph2object.autoscroll=False
                self.graph2.setXRange(len(graph2active[0].plotted)-25-self.graph2object.zoom+value,len(graph2active[0].plotted)+self.graph2object.zoom+value)
                self.horizontalScroll2.setMaximum(len(graph2active[0].plotted)-self.graph2object.zoom-len(graph2active[0].plotted))
                self.horizontalScroll2.setMinimum(self.graph2object.zoom+25-len(graph2active[0].plotted))
        else:
            self.graph1object.autoscroll=False
            self.graph2object.autoscroll=False
            self.graph1.setXRange(len(graph1list[0].plotted)-25-self.graph1object.zoom+value,len(graph1list[0].plotted)+self.graph1object.zoom+value)
            self.graph2.setXRange(len(graph2list[0].plotted)-25-self.graph2object.zoom+value,len(graph2list[0].plotted)+self.graph2object.zoom+value)
    def increaseZoom(self,caller):
     if linked==False:
        if caller=="1":
            #if self.graph1object.zoom==-10:
                #return
            #else:
            self.graph1object.zoom-=5
            print(self.graph1object.zoom)
            if ~playing:
                self.graph1.setXRange(len(graph1active[0].plotted)-25-self.graph1object.zoom,len(graph1active[0].plotted)+self.graph1object.zoom)
        if caller=="2":
            #if self.graph2object.zoom==-10:
                #return
            #else:
            self.graph2object.zoom-=5
            if ~playing2:
                self.graph2.setXRange(len(graph2active[0].plotted)-25-self.graph2object.zoom,len(graph2active[0].plotted)+self.graph2object.zoom)
     else:
         #if self.graph1object.zoom==-10:
             #return
         #else:
         self.graph1object.zoom-=5
         if ~playing:
             self.graph1.setXRange(len(graph1active[0].plotted)-25-self.graph1object.zoom,len(graph1active[0].plotted)+self.graph1object.zoom)
         #if self.graph2object.zoom==-10:
             #return
         #else:
         self.graph2object.zoom-=5
         if ~playing2:
             self.graph2.setXRange(len(graph2active[0].plotted)-25-self.graph2object.zoom,len(graph2active[0].plotted)+self.graph2object.zoom)
  
    def decreaseZoom(self,caller):
        if linked==False:
            if caller=="1":
                self.graph1object.zoom+=5
                if ~playing:
                    print(self.graph1object.zoom)
                    self.graph1.setXRange(len(graph1active[0].plotted)-25-self.graph1object.zoom,len(graph1active[0].plotted)+self.graph1object.zoom)
            if caller=="2":
                self.graph2object.zoom+=5
                if ~playing2:
                    self.graph2.setXRange(len(graph2active[0].plotted)-25-self.graph2object.zoom,len(graph2active[0].plotted)+self.graph2object.zoom)
        else:
            self.graph1object.zoom+=5
            if ~playing:
                self.graph1.setXRange(len(graph1active[0].plotted)-25-self.graph1object.zoom,len(graph1active[0].plotted)+self.graph1object.zoom)
            self.graph2object.zoom+=5
            if ~playing2:
                self.graph2.setXRange(len(graph2active[0].plotted)-25-self.graph2object.zoom,len(graph2active[0].plotted)+self.graph2object.zoom)
    
    
    def sliderfunction(self,value,caller):

        if linked==False:
            if caller=="1":  
                self.graph1object.cinespeed=value
            else:
                self.graph2object.cinespeed=value
        else:
            self.graph1object.cinespeed=value
            self.graph2object.cinespeed=value
            self.speedSlider1.blockSignals(True)
            self.speedSlider2.blockSignals(True)
            self.speedSlider1.setValue(value)
            self.speedSlider2.setValue(value)
            self.speedSlider1.blockSignals(False)
            self.speedSlider2.blockSignals(False)

         
      
    def switchChannel(self,number,selectedindex=0):
        global graph1list
        global graph1active
        global channelindex
        global channelindex2
        if number=="1":
            self.graph1object.autoscroll=True
            if selectedindex==0:
                selectedindex= self.selectChannelBox1.currentIndex()
            channelindex=selectedindex
            if len(graph1list):
                graph1list[selectedindex].list_index=selectedindex
                if graph1list[selectedindex].indextime==0 and graph1list[selectedindex].hidden==True:
                    graph1list[selectedindex].list_index=selectedindex
                    color= ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])]
                    color=QColor(color[0]).getRgb() #?
                    graph1list[selectedindex].color=color
                    graph1list[selectedindex].hidden=False
                    graph1list[selectedindex].name=graph1channels[selectedindex]
                if len(graph1active):
                    alreadythere=graph1list[selectedindex].data[0:graph1active[len(graph1active)-1].indextime]
                    graph1list[selectedindex].plotted=[]
                
                    if len(graph1active[len(graph1active)-1].plotted)==len(graph1active[len(graph1active)-1].data):
                        graph1list[selectedindex].indextime=0
                    else:
                        graph1list[selectedindex].indextime=graph1active[len(graph1active)-1].indextime
                        for i in range(len(alreadythere)):    
                            graph1list[selectedindex].plotted.append(alreadythere[i])   
                plotobject=self.preparePlot(graph1list[selectedindex], graph1list[selectedindex].color)
                plotlist.append(plotobject)
                self.PlotData(graph1list[selectedindex],plotobject.graphobject)
                self.showGraph1.setCheckState(graph1list[selectedindex].hidden)
                self.selectChannelBox1.clear()       # delete all items from comboBox
                self.selectChannelBox1.addItems(graph1channels)
                self.selectChannelBox1.update()
                self.selectChannelBox1.setCurrentText(graph1list[selectedindex].name)
        
                
                
            
        elif number=="2":
            self.graph2object.autoscroll=True
            if selectedindex==0:
                selectedindex= self.selectChannelBox2.currentIndex()
            channelindex=selectedindex
            if len(graph2list):
                graph2list[selectedindex].list_index=selectedindex
                if graph2list[selectedindex].indextime==0 and graph2list[selectedindex].hidden==True:
                    graph2list[selectedindex].list_index=selectedindex
                    color= ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])]
                    color=QColor(color[0]).getRgb() #?
                    graph2list[selectedindex].color=color
                    graph2list[selectedindex].hidden=False
                    graph2list[selectedindex].name=graph2channels[selectedindex]
                    if len(graph2active):
                        alreadythere=graph2list[selectedindex].data[0:graph2active[len(graph2active)-1].indextime]
                        graph2list[selectedindex].plotted=[]
                    
                        if len(graph2active[len(graph2active)-1].plotted)==len(graph2active[len(graph2active)-1].data):
                            graph2list[selectedindex].indextime=0
                        else:
                            graph2list[selectedindex].indextime=graph2active[len(graph2active)-1].indextime
                            for i in range(len(alreadythere)):    
                                graph2list[selectedindex].plotted.append(alreadythere[i])   
                plotobject2=self.preparePlot2(graph2list[selectedindex], graph2list[selectedindex].color)
                plotlist2.append(plotobject2)
                self.PlotData2(graph2list[selectedindex],plotobject2.graphobject)
                self.showGraph2.setCheckState(graph2list[selectedindex].hidden)
                self.selectChannelBox2.clear()       # delete all items from comboBox
                self.selectChannelBox2.addItems(graph2channels)
                self.selectChannelBox2.update()
                self.selectChannelBox2.setCurrentText(graph2list[selectedindex].name)
         
    def moveGraph(self,caller):
        global graph1active
        global graph1list
        global graph1channels
        global graph2channels
        global linked
        color= ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])]
        color=QColor(color[0]).getRgb() #?
      
        if caller == "1":
            found=plotlist[0]
            selectedindex= self.selectChannelBox1.currentIndex()
            activated=True
            for i in range(len(plotlist)):
                if plotlist[i].attachedindex==selectedindex:
                    found=plotlist[i]
                    activeindex=i
               
            duplicate=False
            
            for i in range(len(graph2list)):
                if graph1list[selectedindex] == graph2list[i]:
                    duplicate=True
            if ~duplicate:

                found.graphobject.hide()      
                self.legend.removeItem(graph1list[selectedindex].name)
                graph1list[selectedindex].list_index=len(graph2active)
                plotobject=self.preparePlot2(graph1list[selectedindex], color)
                plotlist2.append(plotobject)
                graph2list.append(graph1list[selectedindex])
                
                

                if len(graph1active) and len(graph2active):
                    if len(graph2active[0].plotted)>len(graph1active[len(graph1active)-1].plotted):
                        alreadythere=graph1list[selectedindex].data[0:graph2active[len(graph2active)-1].indextime]
                        graph2list[len(graph1active)-1].indextime=graph2active[len(graph2active)-1].indextime
    
                        for i in range(len(alreadythere)):
                            graph1list[selectedindex].plotted.append(alreadythere[i])
                            
                            
                    if len(graph2active[0].plotted)<len(graph1active[selectedindex].plotted):
                        difference=len(graph1active[selectedindex].plotted)-2-len(graph2active[0].plotted)
                        graph1active[selectedindex].plotted=graph1active[selectedindex].plotted[0:(len(graph1active[selectedindex].plotted))-difference-1]
                        graph1active[selectedindex].indextime=graph1active[selectedindex].indextime-difference
                        graph2active[0].indextime=graph1active[selectedindex].indextime
                
                for i in range(len(graph1list)):
                    for k in range(len(graph1active)):
                        if graph1active[k]==graph1list[i]:
                            active1index=k
                graph1active.pop(active1index)        
                self.PlotData2(graph1list[selectedindex],plotobject.graphobject)
                self.selectChannelBox2.addItem(graph1channels[selectedindex])
                graph2channels.append(graph1channels[selectedindex])
                plotlist.pop(active1index)
                
                graph1list.pop(selectedindex)
                graph1channels.pop(selectedindex)
                if len(graph1active)==0:
                    self.switchChannel("1")
                # graph2list.append(graph1list[selectedindex])
                # self.prepareplot2(graph2list[selectedindex],found.graphobject
                
                #
               
                #
                self.selectChannelBox1.removeItem(selectedindex)
                self.selectChannelBox1.clear()       # delete all items from comboBox
                self.selectChannelBox1.addItems(graph1channels)
                self.selectChannelBox1.update()
        else:
            found=plotlist2[0]
            activated=True
            selectedindex= self.selectChannelBox2.currentIndex()
            for i in range(len(plotlist2)):
                if plotlist2[i].attachedindex==selectedindex:
                    found=plotlist2[i]    
                    activeindex=i
                    activated=False
                if activated:
                    activeindex=i
                    selectedindex=i
            duplicate=False
            for i in range(len(graph1list)):
                if graph2list[selectedindex] ==graph1list[i]:
                    duplicate=True
            if ~duplicate:
                
                   found.graphobject.hide() 
                   self.legend2.removeItem(graph2list[selectedindex].name)
                   graph2list[selectedindex].list_index=len(graph1active)
                   plotobject=self.preparePlot(graph2list[selectedindex], color)
                   plotlist.append(plotobject)
                   graph1list.append(graph2list[selectedindex])
                   
                   
                   if len(graph1active) and len(graph2active):
                       if len(graph1active[0].plotted)>len(graph2active[selectedindex].plotted):
                           alreadythere=graph2list[selectedindex].data[0:graph1active[len(graph1active)-1].indextime]
                           graph1list[selectedindex].indextime=graph1active[len(graph1active)-1].indextime
        
                           for i in range(len(alreadythere)):
                               graph2list[selectedindex].plotted.append(alreadythere[i])
                                
                                
                       if len(graph1active[0].plotted)<len(graph2active[selectedindex].plotted):
                           difference=len(graph2active[selectedindex].plotted)-2-len(graph1active[0].plotted)
                           graph2active[selectedindex].plotted=graph2active[selectedindex].plotted[0:(len(graph2active[selectedindex].plotted))-difference-1]
                           graph2active[selectedindex].indextime=graph2active[selectedindex].indextime-difference
                           graph1active[0].indextime=graph2active[selectedindex].indextime
                           
                   for i in range(len(graph2list)):
                       for k in range(len(graph2active)):
                           if graph2active[k]==graph2list[i]:
                               active2index=k
                   graph2active.pop(active2index)       
                   self.PlotData(graph2list[selectedindex],plotobject.graphobject)
                   self.selectChannelBox1.addItem(graph2channels[selectedindex])
                   graph1channels.append(graph2channels[selectedindex])
                   plotlist2.pop(active2index)
                   
                   graph2list.pop(selectedindex)
                   graph2channels.pop(selectedindex)
                   if len(graph2active)==0:
                       self.switchChannel("2")
                   # graph2list.append(graph1list[selectedindex])
                   # self.prepareplot2(graph2list[selectedindex],found.graphobject
                   
                   self.selectChannelBox2.removeItem(selectedindex)
                   self.selectChannelBox2.clear()       # delete all items from comboBox
                   self.selectChannelBox2.addItems(graph2channels)
                   self.selectChannelBox2.update()
       

    def changesignalcolor(self,caller):
        global graph1list
        global graph2list
        if linked==False:
            if caller=="1":
                selectedindex= self.selectChannelBox1.currentIndex()
                graph1list[selectedindex].list_index=selectedindex
                color=QColorDialog.getColor().name()
                color=QColor(color).getRgb()
                graph1list[selectedindex].color=color
                for i in range(2):
                    self.Play_Pause(caller)
            else:
                selectedindex= self.selectChannelBox2.currentIndex()
                graph2list[selectedindex].list_index=selectedindex
                color=QColorDialog.getColor().name()
                color=QColor(color).getRgb()
                graph2list[selectedindex].color=color
                for i in range(2):
                    self.Play_Pause(caller)
        else:
            
            selectedindex1= self.selectChannelBox1.currentIndex()
            selectedindex2= self.selectChannelBox2.currentIndex()
            graph1list[selectedindex1].list_index=selectedindex1
            color=QColorDialog.getColor().name()
            color=QColor(color).getRgb()
            graph1list[selectedindex1].color=color
            for i in range(2):
                self.Play_Pause('1')
            selectedindex2= self.selectChannelBox2.currentIndex()
            graph2list[selectedindex2].list_index=selectedindex2
            graph2list[selectedindex2].color=color
            for i in range(2):
                self.Play_Pause('2')
    
    def linkgraphs(self):
        global linked
        if linked==False:
            linked=True
        else:
            linked=False
            


      
    def rewind(self,caller):
     global graph1list
     global graph1active
     if linked==False:
        if caller=="1":
            for i in range (len(graph1active)):
                #selectedindex = self.selectChannelBox1.currentText()
               # selectedindex = int(selectedindex[8]) - 1
                signal = graph1active[i]
                signal.plotted = []  # Clear the plotted data
                signal.indextime = 0  # Reset the index
                self.update_plot_data(signal, plotlist[0].graphobject)  # Update the plot with cleared data
        else:
            for i in range (len(graph2active)):
                #selectedindex = self.selectChannelBox2.currentText()
                #selectedindex = int(selectedindex[8]) - 1
                signal = graph2active[i]
                signal.plotted = []  # Clear the plotted data
                signal.indextime = 0  # Reset the index
                self.update_plot_data2(signal, plotlist2[0].graphobject)  # Update the plot with cleared data
     else:
         for i in range (len(graph1active)):
             signal = graph1active[i]
             signal.plotted = []  # Clear the plotted data
             signal.indextime = 0  # Reset the index
             self.update_plot_data(signal, plotlist[0].graphobject)  # Update the plot with cleared data
         
         for i in range (len(graph2active)):
             signal = graph2active[i]
             signal.plotted = []  # Clear the plotted data
             signal.indextime = 0  # Reset the index
             self.update_plot_data2(signal, plotlist2[0].graphobject)  # Update the plot with cleared data
  
         
    def Play_Pause(self,caller):
     global playing
     global playing2
     if linked==False: 
      if caller=='1':  
        playing = not playing
        if playing:
            self.playPauseButton1.setText('Pause')
            print('switch')
            self.timer1.start()
            self.update1(signal_to_resume,Object_to_resume)
        else:
            self.playPauseButton1.setText('Play')
            #self.Pause()
      else:      
        playing2 = not playing2
        if playing2:
            self.playPauseButton2.setText('Pause')
            print('switch')
            self.timer2.start()
            self.update2(signal_to_resume,Object_to_resume)
        else:
            self.playPauseButton2.setText('Play')
            
     else:
         if playing != playing2:
             playing=playing2
         playing= not playing
         playing2 = not playing2
         if playing:
             self.playPauseButton1.setText('Pause')
             print('switch')
             self.timer1.start()
             self.update1(signal_to_resume,Object_to_resume)

         else:
             self.playPauseButton1.setText('Play')
         
         
         if playing2:
             self.playPauseButton2.setText('Pause')
             print('switch')
             self.timer2.start()
             self.update2(signal_to_resume,Object_to_resume)
         else:
             self.playPauseButton2.setText('Play')
   
             
    def toggle_signal_visibility(self,caller):
     global graph1list
     if linked==False:   
        if caller=="1":
            found=plotlist[0]
            selectedindex= self.selectChannelBox1.currentIndex()
            for i in range(len(plotlist)):
                if plotlist[i].attachedindex==selectedindex:
                    found=plotlist[i]
            if self.showGraph1.isChecked():
               found.graphobject.hide()
               graph1list[selectedindex].hidden=True
            else :
                found.graphobject.show()
                graph1list[selectedindex].hidden=False
        if caller=="2":
            found=plotlist2[0]
            selectedindex= self.selectChannelBox2.currentIndex()
            for i in range(len(plotlist2)):
                if plotlist2[i].attachedindex==selectedindex:
                    found=plotlist2[i]
            if self.showGraph2.isChecked():
               found.graphobject.hide()
               graph2list[selectedindex].hidden=True
            else :
                found.graphobject.show()
                graph2list[selectedindex].hidden=False
     else:
         found1=plotlist[0]
         found2=plotlist2[0]
         selectedindex1= self.selectChannelBox1.currentIndex()
         selectedindex2= self.selectChannelBox2.currentIndex()
         for i in range(len(plotlist)):
             if plotlist[i].attachedindex==selectedindex1:
                 found1=plotlist[i]
         for i in range(len(plotlist2)):
             if plotlist2[i].attachedindex==selectedindex2:
                 found2=plotlist2[i]

         if self.showGraph1.isChecked() or self.showGraph2.isChecked(): 
              found1.graphobject.hide()
              found2.graphobject.hide()
         else :
              found1.graphobject.show()
              found2.graphobject.show()
         
      
   
    def capture_image(self,caller):
       global playing
       global captured_images
       global mean_values
       global std_values
       global min_values
       global max_values
       global duration_values
       global statTables
       global channelNames
       if playing == False or playing2 == False:
           if caller=='1':
             
               plot_image = self.graph1.grab()
               print(plot_image)
               
               for i in range (len(graph1active)):
                   mean_value = round(np.mean(graph1active[i].plotted),2)
                   std_deviation =round( np.std(graph1active[i].plotted),2)
                   min_val = round(np.min(graph1active[i].plotted),2)
                   max_val =round( np.max(graph1active[i].plotted),2)
                   duration = graph1active[i].indextime 
                   channel_name=graph1active[i].name
                   
                   
                   mean_values.append(mean_value)
                   std_values.append(std_deviation)
                   min_values.append(min_val)
                   max_values.append(max_val)
                   duration_values.append(duration)
                   channelNames.append(channel_name)
                   
               
                   statistics_df={
                        "Channel":channelNames,
                        "Mean": mean_values,
                        "STD": std_values,
                        "Min": min_values,
                        "Max": max_values,
                        "Duration": duration_values
                    }
               # print(f"Mean: {mean_value}, Standard Deviation: {std_deviation}, Min: {min_val}, Max: {max_val}, Duration: {duration}")
               df = pd.DataFrame(statistics_df)
               statTables.append(df)
               mean_values=[]
               std_values=[]
               min_values=[]
               max_values=[]
               duration_values=[]
               channelNames=[]
            
               captured_images.append(plot_image)
           
           elif caller=='2':
               plot_image = self.graph2.grab()
               for i in range (len(graph2active)):
                   mean_value = round(np.mean(graph2active[i].plotted),2)
                   std_deviation = round(np.std(graph2active[i].plotted),2)
                   min_val = round(np.min(graph2active[i].plotted),2)
                   max_val = round(np.max(graph2active[i].plotted),2)
                   duration = graph2active[i].indextime 
                   channel_name=graph2active[i].name
                   
                   mean_values.append(mean_value)
                   std_values.append(std_deviation)
                   min_values.append(min_val)
                   max_values.append(max_val)
                   duration_values.append(duration)
                   channelNames.append(channel_name)
                  
                   statistics_df={
                        "Channel":channelNames,
                        "Mean": mean_values,
                        "STD": std_values,
                        "Min": min_values,
                        "Max": max_values,
                        "Duration": duration_values
                    }
               df = pd.DataFrame(statistics_df)
               statTables.append(df)
               mean_values=[]
               std_values=[]
               min_values=[]
               max_values=[]
               duration_values=[]
               channelNames=[]
            
               captured_images.append(plot_image)
    def export_to_pdf(self):
       global statTables
       options = QFileDialog.Options()
       file_path, _ = QFileDialog.getSaveFileName(MainWindow, "Save PDF File", "", "PDF Files (*.pdf)", options=options)
       
       if file_path:
           pdf = FPDF()
           pdf.set_auto_page_break(auto=True, margin=15)
           pdf.add_page()
           pdf.set_font('Arial', 'B', 20)
           pdf.set_xy(80,(pdf.h-90) / 2)
           pdf.cell(50, 10, 'Signal Viewer Report', 0, 0, 'C')
           pdf.set_font('Arial', 'B', 15)
           pdf.ln()
           pdf.cell(70)
           pdf.cell(60,10,'Report to:')
           pdf.ln()
           pdf.cell(70)
           pdf.cell(60, 10, 'Dr.Tamer Basha')
           pdf.ln()
           pdf.cell(70)
           pdf.cell(60, 10, 'Eng.Christina Adly')
           # insert the logos
           #pdf.image('C:\\Users\\yi\\Desktop\\Gam3a\\CUFE.png', 1, 1, 50, 40)
           #pdf.image('C:\\Users\\yi\\Desktop\\Gam3a\\CU.png', 160, 1, 50, 40)
           pdf.add_page()
           pdf.set_font("Arial", size=10)
           
           image_width = 80
           x_left = 5
           x_right = 120
           y_top = 30
           cell_width = 17
           cell1_width = 25
           cell_height = 8
           y_bottom = 140
           
           for x, (image, statistics_df) in enumerate(zip(captured_images, statTables)):
               temp_image_path = f"plot_temp_{x}.png"
               image.save(temp_image_path, "PNG")
   
               if len(statTables)==1:
                   if x != 0:
                       pdf.add_page()
                   pdf.image(temp_image_path,x=20,y=20,w=160)
                   header=statTables[x].columns.tolist()
                   table_x = 20
                   table_y = 140 
                   pdf.set_xy(table_x, table_y)
                   for i,item in enumerate (header):
                       if i==0:
                           pdf.cell(32, cell_height, str(item), 1)
                       else:
                           pdf.cell(28, cell_height, str(item), 1)
                   pdf.ln()
                   pdf.set_font("Arial", size=12)
                   for index, row in statTables[x].iterrows():
                       pdf.set_xy(table_x, pdf.get_y())
                       for i,item in enumerate(row):
                           if i==0:
                               pdf.cell(32, cell_height, str(item), 1)
                           else:
                               pdf.cell(28, cell_height, str(item), 1)
                       pdf.ln()
               elif len(statTables)==2:
                    #if x != 0:
                     #   pdf.add_page()
                    if x==0:    
                        pdf.image(temp_image_path,x=20,y=10,w=170,h=90)
                        header=statTables[x].columns.tolist()
                        table_x = 20
                        table_y = 100 
                        pdf.set_xy(table_x, table_y)
                        for i,item in enumerate (header):
                            if i==0:
                                pdf.cell(32, cell_height, str(item), 1)
                            else:
                                pdf.cell(28, cell_height, str(item), 1)
                        pdf.ln()
                        pdf.set_font("Arial", size=12)
                        for index, row in statTables[x].iterrows():
                            pdf.set_xy(table_x, pdf.get_y())
                            for i,item in enumerate(row):
                                if i==0:
                                    pdf.cell(32, cell_height, str(item), 1)
                                else:
                                    pdf.cell(28, cell_height, str(item), 1)
                            pdf.ln()
                    if x==1:
                        pdf.image(temp_image_path,x=20,y=150,w=170,h=90)
                        header=statTables[x].columns.tolist()
                        table_x = 20
                        table_y = 240 
                        pdf.set_xy(table_x, table_y)
                        for i,item in enumerate (header):
                            if i==0:
                                pdf.cell(32, cell_height, str(item), 1)
                            else:
                                pdf.cell(28, cell_height, str(item), 1)
                        pdf.ln()
                        pdf.set_font("Arial", size=12)
                        for index, row in statTables[x].iterrows():
                            pdf.set_xy(table_x, pdf.get_y())
                            for i,item in enumerate(row):
                                if i==0:
                                    pdf.cell(32, cell_height, str(item), 1)
                                else:
                                    pdf.cell(28, cell_height, str(item), 1)
                            pdf.ln()
               elif x % 3 == 0:
                   if x != 0:
                       pdf.add_page()
                   pdf.image(temp_image_path, x=x_left, y=y_top - 25, w=image_width)
                   header=statTables[x].columns.tolist()
                   
                   table_x = 90
                   table_y = 5  # Adjust the Y position as needed
                   pdf.set_xy(table_x, table_y)
                   for i,item in enumerate (header):
                       if i==0:
                           pdf.cell(cell1_width, cell_height, str(item), 1)
                       else:
                           pdf.cell(cell_width, cell_height, str(item), 1)
                   pdf.ln()
                   pdf.set_font("Arial", size=8)
                   for index, row in statTables[x].iterrows():
                       pdf.set_xy(table_x, pdf.get_y())
                       for i,item in enumerate(row):
                           if i==0:
                               pdf.cell(cell1_width, cell_height, str(item), 1)
                           else:
                               pdf.cell(cell_width, cell_height, str(item), 1)
                       pdf.ln()
              
               elif x==1 or x==4:
                   pdf.image(temp_image_path, x=x_right, y=y_bottom-50, w=image_width)
   
                   # Print the corresponding DataFrame as a table
                   header=statTables[x].columns.tolist()
                   
                   table_x = 10
                   table_y = 100  # Adjust the Y position as needed
                   pdf.set_xy(table_x, table_y)
                   for i,item in enumerate (header):
                       if i==0:
                           pdf.cell(cell1_width, cell_height, str(item), 1)
                       else:
                           pdf.cell(cell_width, cell_height, str(item), 1)
                   pdf.ln()
                   pdf.set_font("Arial", size=8)
                   for index, row in statTables[x].iterrows():
                       pdf.set_xy(table_x, pdf.get_y())
                       for i,item in enumerate(row):
                           if i==0:
                               pdf.cell(cell1_width, cell_height, str(item), 1)
                           else:
                               pdf.cell(cell_width, cell_height, str(item), 1)
                       pdf.ln()
               else:
                    pdf.image(temp_image_path, x=x_left, y=y_bottom+40, w=image_width)
                    header=statTables[x].columns.tolist()
                    
                    table_x = 90
                    table_y = 185  # Adjust the Y position as needed
                    pdf.set_xy(table_x, table_y)
                    for i,item in enumerate (header):
                        if i==0:
                            pdf.cell(cell1_width, cell_height, str(item), 1)
                        else:
                            pdf.cell(cell_width, cell_height, str(item), 1)
                    pdf.ln()
                    pdf.set_font("Arial", size=8)
                    for index, row in statTables[x].iterrows():
                        pdf.set_xy(table_x, pdf.get_y())
                        for i,item in enumerate(row):
                            if i==0:
                                pdf.cell(cell1_width, cell_height, str(item), 1)
                            else:
                                pdf.cell(cell_width, cell_height, str(item), 1)
                        pdf.ln()
               os.remove(temp_image_path)  # Remove the temporary image file
   
           pdf.output(file_path)
    def store_title_name(self):
        global user_input
        user_input=self.titleBox1.text()
        if self.legend:
             self.legend.removeItem(graph1list[channelindex].name)
             graph1list[channelindex].name=user_input
             graph1channels[channelindex]=user_input
        self.ChangeTitle()
  
    def ChangeTitle(self):
       if user_input:
            self.selectChannelBox1.setItemText(channelindex, user_input)
            #graph1list[channelindex],legend
            #Current_object.graphobject.name=user_input
            self.titleBox1.clear()  
           # self.legend.addItem(user_input)
            #self.legend.name=user_input
            #self.legend_text = user_input
            #self.legend.clear()
            #if self.legend:
            self.legend.removeItem(graph1list[channelindex].name)
            #self.legend.setLabel(left=user_input)
            self.legend.addItem(graph1list[channelindex],name=user_input) 

    def store_title_name2(self):
        global user_input
        user_input=self.titleBox2.text()
        if self.legend:
             self.legend.removeItem(graph1list[channelindex].name)
             graph1list[channelindex].name=user_input
             graph1channels[channelindex]=user_input
        self.ChangeTitle2()

    
    def ChangeTitle2(self):
       if user_input:
            self.selectChannelBox2.setItemText(channelindex, user_input)
            #Current_object.graphobject.name=user_input
            self.titleBox2.clear()  
            #self.legend_text = user_input
            #self.legend.clear()
            self.legend2.removeItem(graph2list[channelindex].name)
            #self.legend.setLabels(left=user_input)
            self.legend2.addItem(graph2list[channelindex],name=user_input)   
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1080, 747)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.graph1 = PlotWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graph1.sizePolicy().hasHeightForWidth())
        self.graph1.setSizePolicy(sizePolicy)
        self.graph1.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.graph1.setObjectName("graph1")
        self.graph1.setBackground("w")
        self.graph1object=PlotWindow(self.graph1,0,zoom=20)
        self.legend= self.graph1.addLegend(offset=1,colCount=2)
        self.gridLayout.addWidget(self.graph1, 0, 1, 1, 1)
        self.graph2 = PlotWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graph2.sizePolicy().hasHeightForWidth())
        self.graph2.setSizePolicy(sizePolicy)
        self.graph2.setObjectName("graph2")
        self.graph2.setBackground("w")
        self.gridLayout.addWidget(self.graph2, 0, 5, 1, 1)
        self.graph2object=PlotWindow(self.graph2,0,zoom=20)
        self.legend2=self.graph2.addLegend(offset=1)
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame2.sizePolicy().hasHeightForWidth())
        self.frame2.setSizePolicy(sizePolicy)
        self.frame2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame2.setLineWidth(1)
        self.frame2.setMidLineWidth(10)
        self.frame2.setObjectName("frame2")
        
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.speedSlider2 = QtWidgets.QSlider(self.frame2)
        self.speedSlider2.setOrientation(QtCore.Qt.Horizontal)
        self.speedSlider2.setObjectName("speedSlider2")
        self.speedSlider2.setMinimum(-240)
        self.speedSlider2.setMaximum(240)
        self.speedSlider2.setValue(0)
        self.speedSlider2.valueChanged.connect(lambda:self.sliderfunction(self.speedSlider2.value(),"2"))
        self.gridLayout_3.addWidget(self.speedSlider2, 3, 3, 1, 3)
        self.titleLabel2 = QtWidgets.QLabel(self.frame2)
        self.titleLabel2.setStyleSheet("font: 9pt \"MS Shell Dlg 2\";")
        self.titleLabel2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.titleLabel2.setObjectName("titleLabel2")
        self.gridLayout_3.addWidget(self.titleLabel2, 4, 0, 1, 1)
        self.rewindButton2 = QtWidgets.QPushButton(self.frame2,clicked=lambda:self.rewind("2"))
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.rewindButton2.sizePolicy().hasHeightForWidth())
        self.rewindButton2.setSizePolicy(sizePolicy)
        self.rewindButton2.setMaximumHeight(50)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.rewindButton2.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../Icons/restart.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rewindButton2.setIcon(icon)
        self.rewindButton2.setObjectName("rewindButton2")
        self.gridLayout_3.addWidget(self.rewindButton2, 2, 2, 1, 1)
        self.speedLabel2 = QtWidgets.QLabel(self.frame2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.speedLabel2.sizePolicy().hasHeightForWidth())
        self.speedLabel2.setMaximumHeight(36)
        self.speedLabel2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.speedLabel2.setFont(font)
        self.speedLabel2.setAlignment(QtCore.Qt.AlignCenter)
        self.speedLabel2.setObjectName("speedLabel2")
        self.gridLayout_3.addWidget(self.speedLabel2, 2, 3, 1, 3)
        
        self.browseButton2 = QtWidgets.QPushButton(self.frame2,clicked=lambda:self.BrowseSignal_2())
        self.browseButton2.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.browseButton2.sizePolicy().hasHeightForWidth())
        self.browseButton2.setSizePolicy(sizePolicy)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../../Icons/browse.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.browseButton2.setIcon(icon1)
        self.browseButton2.setObjectName("browseButton2")
        self.gridLayout_3.addWidget(self.browseButton2, 5, 0, 1, 3)
        self.titleBox2 = QtWidgets.QLineEdit(self.frame2)
        self.titleBox2.setMaximumHeight(36)
        self.titleBox2.returnPressed.connect(self.store_title_name2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.titleBox2.sizePolicy().hasHeightForWidth())
        self.titleBox2.setSizePolicy(sizePolicy)
        self.titleBox2.setObjectName("titleBox2")
        self.gridLayout_3.addWidget(self.titleBox2, 4, 1, 1, 2)
        self.playPauseButton2 = QtWidgets.QPushButton(self.frame2,clicked=lambda:self.Play_Pause("2"))
        self.playPauseButton2.setMaximumHeight(36)
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.playPauseButton2.sizePolicy().hasHeightForWidth())
        self.playPauseButton2.setSizePolicy(sizePolicy)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../../Icons/27185.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.playPauseButton2.setIcon(icon2)
        self.playPauseButton2.setObjectName("playPauseButton2")
        
        self.gridLayout_3.addWidget(self.playPauseButton2, 0, 3, 1, 3)
        self.changeColor2 = QtWidgets.QPushButton(self.frame2,clicked=lambda:self.changesignalcolor("2"))
        self.changeColor2.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.changeColor2.sizePolicy().hasHeightForWidth())
        self.changeColor2.setSizePolicy(sizePolicy)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../../Icons/3963860.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.changeColor2.setIcon(icon3)
        self.changeColor2.setIconSize(QtCore.QSize(20, 20))
        self.changeColor2.setObjectName("changeColor2")
        self.gridLayout_3.addWidget(self.changeColor2, 1, 0, 1, 3)
        self.selectChannelLabel2 = QtWidgets.QLabel(self.frame2)
        self.selectChannelLabel2.setStyleSheet("font: 9pt \"MS Shell Dlg 2\";")
        self.selectChannelLabel2.setObjectName("selectChannelLabel2")
        self.selectChannelLabel2.setMaximumHeight(36)
        self.gridLayout_3.addWidget(self.selectChannelLabel2, 0, 0, 1, 2)
        self.zoomInButton2 = QtWidgets.QPushButton(self.frame2,clicked=lambda:self.increaseZoom("2"))
        self.zoomInButton2.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.zoomInButton2.sizePolicy().hasHeightForWidth())
        self.zoomInButton2.setSizePolicy(sizePolicy)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../../../../Downloads/zoom-in (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.zoomInButton2.setIcon(icon4)
        self.zoomInButton2.setObjectName("zoomInButton2")
        self.gridLayout_3.addWidget(self.zoomInButton2, 1, 3, 1, 2)
        self.selectChannelBox2 = QtWidgets.QComboBox(self.frame2)
        self.selectChannelBox2.activated.connect(lambda:self.switchChannel("2"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.selectChannelBox2.sizePolicy().hasHeightForWidth())
        self.selectChannelBox2.setSizePolicy(sizePolicy)
        self.selectChannelBox2.setMaximumHeight(36)
        self.selectChannelBox2.setObjectName("selectChannelBox2")
        self.gridLayout_3.addWidget(self.selectChannelBox2, 0, 2, 1, 1)
        self.showGraph2 = QtWidgets.QCheckBox(self.frame2,clicked=lambda:self.toggle_signal_visibility("2"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.showGraph2.sizePolicy().hasHeightForWidth())
        self.showGraph2.setMaximumHeight(36)
        self.showGraph2.setSizePolicy(sizePolicy)
        self.showGraph2.setStyleSheet("font: 9pt \"MS Shell Dlg 2\";")
        self.showGraph2.setObjectName("showGraph2")
        self.gridLayout_3.addWidget(self.showGraph2, 2, 0, 1, 2)
        self.zoomOutButton2 = QtWidgets.QPushButton(self.frame2,clicked=lambda:self.decreaseZoom("2"))
        self.zoomOutButton2.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.zoomOutButton2.sizePolicy().hasHeightForWidth())
        self.zoomOutButton2.setSizePolicy(sizePolicy)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("../../../../Downloads/magnifying-glass (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.zoomOutButton2.setIcon(icon5)
        self.zoomOutButton2.setObjectName("zoomOutButton2")
        self.gridLayout_3.addWidget(self.zoomOutButton2, 1, 5, 1, 1)
        self.moveFrom2 = QtWidgets.QPushButton(self.frame2,clicked=lambda:self.moveGraph("2"))
        self.moveFrom2.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.moveFrom2.sizePolicy().hasHeightForWidth())
        self.moveFrom2.setSizePolicy(sizePolicy)
        self.moveFrom2.setObjectName("moveFrom2")
        self.gridLayout_3.addWidget(self.moveFrom2, 5, 3, 1, 3)
        self.capture2 = QtWidgets.QPushButton(self.frame2,clicked=lambda:self.capture_image("2"))
        self.capture2.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.capture2.sizePolicy().hasHeightForWidth())
        self.capture2.setSizePolicy(sizePolicy)
        self.capture2.setObjectName("capture2")
        self.gridLayout_3.addWidget(self.capture2, 4, 3, 1, 3)
        self.gridLayout.addWidget(self.frame2, 2, 4, 1, 2)
        self.extractButton = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.export_to_pdf())
        self.extractButton.setMaximumSize(QtCore.QSize(191, 31))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("../../Icons/extract.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.extractButton.setIcon(icon6)
        self.extractButton.setObjectName("extractButton")
        self.gridLayout.addWidget(self.extractButton, 5, 3, 1, 1)
        self.horizontalScroll2 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalScroll2.setMinimum(-250)
        self.horizontalScroll2.setMaximum(250)
        self.horizontalScroll2.setValue(-250)
        self.horizontalScroll2.valueChanged.connect(lambda:self.horizontalscroll(self.horizontalScroll2.value(),"2"))
        self.horizontalScroll2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalScroll2.setObjectName("horizontalScroll2")
        self.gridLayout.addWidget(self.horizontalScroll2, 1, 5, 1, 1)
        self.verticalScroll1 = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScroll1.setOrientation(QtCore.Qt.Vertical)
        self.verticalScroll1.setObjectName("verticalScroll1")
        self.verticalScroll1.setMinimum(-8)
        self.verticalScroll1.setMaximum(8)
        self.verticalScroll1.setValue(0)
        self.verticalScroll1.setSingleStep(1)
        self.verticalScroll1.valueChanged.connect(lambda:self.verticalscroll(self.verticalScroll1.value(),"1"))
        self.gridLayout.addWidget(self.verticalScroll1, 0, 0, 1, 1)
        self.horizontalScroll1 = QtWidgets.QScrollBar(self.centralwidget)
        self.horizontalScroll1.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalScroll1.setObjectName("horizontalScroll1")
        self.horizontalScroll1.setMinimum(-250)
        self.horizontalScroll1.setMaximum(250)
        self.horizontalScroll1.setValue(-250)
        self.horizontalScroll1.valueChanged.connect(lambda:self.horizontalscroll(self.horizontalScroll1.value(),"1"))
        self.gridLayout.addWidget(self.horizontalScroll1, 1, 1, 1, 1)
        self.verticalScroll2 = QtWidgets.QSlider(self.centralwidget)
        self.verticalScroll2.setOrientation(QtCore.Qt.Vertical)
        self.verticalScroll2.setObjectName("verticalScroll2")
        self.verticalScroll2.setMinimum(-8)
        self.verticalScroll2.setMaximum(8)
        self.verticalScroll2.setValue(0)
        self.verticalScroll2.setSingleStep(1)
        self.verticalScroll2.valueChanged.connect(lambda:self.verticalscroll(self.verticalScroll2.value(),"2"))
        self.gridLayout.addWidget(self.verticalScroll2, 0, 4, 1, 1)
        self.frame1 = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame1.sizePolicy().hasHeightForWidth())
        self.frame1.setSizePolicy(sizePolicy)
        self.frame1.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame1.setLineWidth(1)
        self.frame1.setMidLineWidth(10)
        self.frame1.setObjectName("frame1")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame1)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.zoomOutButton1 = QtWidgets.QPushButton(self.frame1,clicked=lambda:self.decreaseZoom("1"))
        self.zoomOutButton1.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.zoomOutButton1.sizePolicy().hasHeightForWidth())
        self.zoomOutButton1.setSizePolicy(sizePolicy)
        self.zoomOutButton1.setIcon(icon5)
        self.zoomOutButton1.setObjectName("zoomOutButton1")
        self.gridLayout_2.addWidget(self.zoomOutButton1, 1, 4, 1, 1)
        self.changeColor1 = QtWidgets.QPushButton(self.frame1,clicked=lambda: self.changesignalcolor("1"))
        self.changeColor1.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.changeColor1.sizePolicy().hasHeightForWidth())
        self.changeColor1.setSizePolicy(sizePolicy)
        self.changeColor1.setIcon(icon3)
        self.changeColor1.setIconSize(QtCore.QSize(20, 20))
        self.changeColor1.setObjectName("changeColor1")
        self.gridLayout_2.addWidget(self.changeColor1, 1, 0, 1, 3)
        self.selectChannelBox1 = QtWidgets.QComboBox(self.frame1)
        self.selectChannelBox1.activated.connect(lambda:self.switchChannel("1"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.selectChannelBox1.sizePolicy().hasHeightForWidth())
        self.selectChannelBox1.setSizePolicy(sizePolicy)
        self.selectChannelBox1.setMaximumSize(QtCore.QSize(16777215, 22))
        self.selectChannelBox1.setObjectName("selectChannelBox1")
        self.selectChannelBox1.setMaximumHeight(36)
        self.gridLayout_2.addWidget(self.selectChannelBox1, 0, 2, 1, 1)
        self.titleLabel1 = QtWidgets.QLabel(self.frame1)
        self.titleLabel1.setStyleSheet("font: 9pt \"MS Shell Dlg 2\";")
        self.titleLabel1.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.titleLabel1.setObjectName("titleLabel1")
        self.gridLayout_2.addWidget(self.titleLabel1, 4, 0, 1, 1)
        self.browseButton1 = QtWidgets.QPushButton(self.frame1,clicked=lambda:self.BrowseSignal_1())
        self.browseButton1.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.browseButton1.sizePolicy().hasHeightForWidth())
        self.browseButton1.setSizePolicy(sizePolicy)
        self.browseButton1.setIcon(icon1)
        self.browseButton1.setObjectName("browseButton1")
        self.gridLayout_2.addWidget(self.browseButton1, 5, 0, 1, 3)
        self.titleBox1 = QtWidgets.QLineEdit(self.frame1)
        self.titleBox1.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.titleBox1.sizePolicy().hasHeightForWidth())
        self.titleBox1.setSizePolicy(sizePolicy)
        self.titleBox1.setObjectName("titleBox1")
        self.titleBox1.returnPressed.connect(self.store_title_name)
        self.gridLayout_2.addWidget(self.titleBox1, 4, 1, 1, 2)
        self.zoomInButton1 = QtWidgets.QPushButton(self.frame1,clicked=lambda:self.increaseZoom("1"))
        self.zoomInButton1.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.zoomInButton1.sizePolicy().hasHeightForWidth())
        self.zoomInButton1.setSizePolicy(sizePolicy)
        self.zoomInButton1.setIcon(icon4)
        self.zoomInButton1.setObjectName("zoomInButton1")
        self.gridLayout_2.addWidget(self.zoomInButton1, 1, 3, 1, 1)
        self.rewindButton1 = QtWidgets.QPushButton(self.frame1,clicked=lambda:self.rewind("1"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.rewindButton1.sizePolicy().hasHeightForWidth())
        self.rewindButton1.setSizePolicy(sizePolicy)
        self.rewindButton1.setMaximumHeight(50)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.rewindButton1.setFont(font)
        self.rewindButton1.setIcon(icon)
        self.rewindButton1.setObjectName("rewindButton1")
        self.gridLayout_2.addWidget(self.rewindButton1, 2, 2, 1, 1)
        self.capture1 = QtWidgets.QPushButton(self.frame1,clicked=lambda:self.capture_image("1"))
        self.capture1.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.capture1.sizePolicy().hasHeightForWidth())
        self.capture1.setSizePolicy(sizePolicy)
        self.capture1.setObjectName("capture1")
        self.gridLayout_2.addWidget(self.capture1, 4, 3, 1, 2)
        self.speedLabel1 = QtWidgets.QLabel(self.frame1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.speedLabel1.sizePolicy().hasHeightForWidth())
        self.speedLabel1.setSizePolicy(sizePolicy)
        self.speedLabel1.setMaximumHeight(36)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.speedLabel1.setFont(font)
        self.speedLabel1.setAlignment(QtCore.Qt.AlignCenter)
        self.speedLabel1.setObjectName("speedLabel1")
        self.gridLayout_2.addWidget(self.speedLabel1, 2, 3, 1, 2)
        self.moveFrom1 = QtWidgets.QPushButton(self.frame1,clicked=lambda:self.moveGraph("1"))
        self.moveFrom1.setMaximumHeight(36)
        self.moveFrom1.setObjectName("moveFrom1")
        self.gridLayout_2.addWidget(self.moveFrom1, 5, 3, 1, 2)
        self.playPauseButton1 = QtWidgets.QPushButton(self.frame1,clicked=lambda:self.Play_Pause("1"))
        self.playPauseButton1.setMaximumHeight(36)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.playPauseButton1.sizePolicy().hasHeightForWidth())
        self.playPauseButton1.setSizePolicy(sizePolicy)
        self.playPauseButton1.setIcon(icon2)
        self.playPauseButton1.setObjectName("playPauseButton1")
        self.gridLayout_2.addWidget(self.playPauseButton1, 0, 3, 1, 2)
        self.showGraph1 = QtWidgets.QCheckBox(self.frame1,clicked=lambda:self.toggle_signal_visibility("1"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.showGraph1.sizePolicy().hasHeightForWidth())
        self.showGraph1.setSizePolicy(sizePolicy)
        self.showGraph1.setMaximumHeight(36)
        self.showGraph1.setStyleSheet("font: 9pt \"MS Shell Dlg 2\";")
        self.showGraph1.setObjectName("showGraph1")
        self.gridLayout_2.addWidget(self.showGraph1, 2, 0, 1, 2)
        self.speedSlider1 = QtWidgets.QSlider(self.frame1)
        self.speedSlider1.setOrientation(QtCore.Qt.Horizontal)
        self.speedSlider1.setObjectName("speedSlider1")
        self.speedSlider1.setMinimum(-240)
        self.speedSlider1.setMaximum(240)
        self.speedSlider1.setValue(0)
        self.speedSlider1.valueChanged.connect(lambda:self.sliderfunction(self.speedSlider1.value(),"1"))
        self.gridLayout_2.addWidget(self.speedSlider1, 3, 3, 1, 2)
        self.selectChannelLabel1 = QtWidgets.QLabel(self.frame1)
        self.selectChannelLabel1.setStyleSheet("font: 9pt \"MS Shell Dlg 2\";")
        self.selectChannelLabel1.setObjectName("selectChannelLabel1")
        self.gridLayout_2.addWidget(self.selectChannelLabel1, 0, 0, 1, 2)
        self.gridLayout.addWidget(self.frame1, 2, 0, 1, 2)
        self.linkBox = QtWidgets.QCheckBox(self.centralwidget,clicked=lambda:self.linkgraphs())
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.linkBox.setFont(font)
        self.linkBox.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"margin-left:0;\n"
"padding-left:3px;\n"
"")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("../../Icons/800px-Chain_link_icon_slanted.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.linkBox.setIcon(icon7)
        self.linkBox.setObjectName("linkBox")
        #self.linkBox.setFixedWidth(25)
        self.gridLayout.addWidget(self.linkBox, 6, 3, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1080, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.titleLabel2.setText(_translate("MainWindow", "Title:"))
        self.rewindButton2.setText(_translate("MainWindow", "Rewind"))
        self.speedLabel2.setText(_translate("MainWindow", "Cine Speed"))
        self.browseButton2.setText(_translate("MainWindow", "Browse"))
        self.playPauseButton2.setText(_translate("MainWindow", "Play / Pause"))
        self.changeColor2.setText(_translate("MainWindow", "Change Color"))
        self.selectChannelLabel2.setText(_translate("MainWindow", "Select Channel:"))
        self.zoomInButton2.setText(_translate("MainWindow", "Zoom In"))
        self.showGraph2.setText(_translate("MainWindow", "Hide"))
        self.zoomOutButton2.setText(_translate("MainWindow", "Zoom Out"))
        self.moveFrom2.setText(_translate("MainWindow", "Move to Graph 1"))
        self.capture1.setText(_translate("MainWindow", "Capture"))
        self.extractButton.setText(_translate("MainWindow", "Export"))
        self.zoomOutButton1.setText(_translate("MainWindow", "Zoom Out"))
        self.changeColor1.setText(_translate("MainWindow", "Change Color"))
        self.titleLabel1.setText(_translate("MainWindow", "Title:"))
        self.browseButton1.setText(_translate("MainWindow", "Browse"))
        self.zoomInButton1.setText(_translate("MainWindow", "Zoom In"))
        self.rewindButton1.setText(_translate("MainWindow", "Rewind"))
        self.capture2.setText(_translate("MainWindow", "Capture"))
        self.speedLabel1.setText(_translate("MainWindow", "Cine Speed"))
        self.moveFrom1.setText(_translate("MainWindow", "Move to Graph 2"))
        self.playPauseButton1.setText(_translate("MainWindow", "Play / Pause"))
        self.showGraph1.setText(_translate("MainWindow", "Hide"))
        self.selectChannelLabel1.setText(_translate("MainWindow", "Select Channel:"))
        self.linkBox.setText(_translate("MainWindow", "Link"))

        self.plotWidget1 = self.graph1
        self.plotWidget2=self.graph2
        # Set up the PlotWidget
        self.plotWidget1.setTitle("Graph 1")
        self.plotWidget1.setLabel('left', 'Y-Axis')
        self.plotWidget1.setLabel('bottom', 'X-Axis')
        self.plotWidget1.showGrid(x=True, y=True)

        self.plotWidget2.setTitle("Graph 2")
        self.plotWidget2.setLabel('left', 'Y-Axis')
        self.plotWidget2.setLabel('bottom', 'X-Axis')
        self.plotWidget2.showGrid(x=True, y=True)
if __name__ == "__main__":
        
        
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

    

